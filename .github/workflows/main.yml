# GitHub Actionsワークフローファイル
# ファイル名: .github/workflows/main.yml

name: Scrape TimeTree & Update G-Calendar

on:
  # 1時間ごとに自動実行 (cronのスケジュール)
  schedule:
    - cron: "0 */1 * * *"
  
  # GitHubのActionsタブから手動で実行することも可能にする
  workflow_dispatch:

jobs:
  scrape-and-update:
    # 実行環境として最新のUbuntuを使用
    runs-on: ubuntu-latest

    # ジョブ全体の環境変数を設定
    env:
      # タイムゾーンを日本時間に設定
      TZ: Asia/Tokyo

    steps:
      # 1. リポジトリのコードをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Python環境をセットアップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. pipのキャッシュパスを取得
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      # 4. pipの依存関係をキャッシュ
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 5. Pythonの依存ライブラリをインストール (キャッシュがあれば高速化)
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 6. Playwrightのキャッシュパスを取得するためにNode.jsをセットアップ
      - name: Set up Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 7. Playwrightのキャッシュパスを動的に取得
      - name: Get Playwright cache directory
        id: playwright-cache
        run: |
          # npxコマンドでPlaywrightのドライバパスを取得し、その親ディレクトリをキャッシュ対象とする
          echo "dir=$(npx playwright print-driver-path | xargs dirname)" >> $GITHUB_OUTPUT
      
      # 8. Playwrightのブラウザをキャッシュ
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ${{ steps.playwright-cache.outputs.dir }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # 9. PlaywrightのブラウザとOS依存関係をインストール (キャッシュがあれば高速化)
      - name: Install Playwright and dependencies
        run: playwright install --with-deps

      # 10. Pythonスクリプトを実行
      - name: Run scraper script
        env:
          TIMETREE_EMAIL: ${{ secrets.TIMETREE_EMAIL }}
          TIMETREE_PASSWORD: ${{ secrets.TIMETREE_PASSWORD }}
          TIMETREE_CALENDAR_URL: ${{ secrets.TIMETREE_CALENDAR_URL }}
          GAS_WEBAPP_URL: ${{ secrets.GAS_WEBAPP_URL }}
        run: python timetree_scraper.py