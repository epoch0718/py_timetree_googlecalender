# GitHub Actionsワークフローファイル
# ファイル名: .github/workflows/main.yml

name: Scrape TimeTree and Update Google Calendar

on:
  schedule:
    - cron: "0 */1 * * *"
  workflow_dispatch:

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Tokyo

    steps:
      # 1. リポジトリのコードをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Python環境をセットアップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' # pipのキャッシュはこれが一番シンプルで十分

      # 3. 依存ライブラリをインストール
      - name: Install Python dependencies
        run: pip install -r requirements.txt
      
      # ★★★ ここからがQiita記事のアイデアを取り入れた修正部分 ★★★
      # https://qiita.com/ohakutsu/items/8e4c10cad360bf4cda04

      # 4. Playwrightのバージョンを取得
      - name: Get Playwright version
        id: playwright-version
        run: |
          echo "VERSION=$(pip show playwright | grep Version | cut -d ' ' -f 2)" >> $GITHUB_ENV
      
      # 5. Playwrightのブラウザをキャッシュ
      #    キャッシュキーにPlaywrightのバージョンを含める
      - name: Cache Playwright browsers
        id: cache-playwright # このステップにIDを付けて後で参照する
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ env.VERSION }}-

      # 6. Playwrightのブラウザと依存関係をインストール
      #    【重要】キャッシュがヒットしなかった場合のみ、このステップを実行する
      - name: Install Playwright browsers and dependencies
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: playwright install --with-deps

      # ★★★ 修正ここまで ★★★

      # 7. Pythonスクリプトを実行
      - name: Run scraper script
        env:
          TIMETREE_EMAIL: ${{ secrets.TIMETREE_EMAIL }}
          TIMETREE_PASSWORD: ${{ secrets.TIMETREE_PASSWORD }}
          TIMETREE_CALENDAR_URL: ${{ secrets.TIMETREE_CALENDAR_URL }}
          GAS_WEBAPP_URL: ${{ secrets.GAS_WEBAPP_URL }}
        run: python timetree_scraper.py

      # 8. 実行結果をジョブサマリーに出力
      - name: Post execution summary
        run: |
          echo "## 実行結果サマリー" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **ワークフロー名**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **実行トリガー**: `${{ github.event_name }}`" >> $GITHUB_STEP_SUMMARY
          echo "- **ステータス**: **成功** ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 実行時間" >> $GITHUB_STEP_SUMMARY
          echo "| 開始時刻 (UTC) | 終了時刻 (UTC) | 実行時間 |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|---|" >> $GITHUB_STEP_SUMMARY
          
          # ジョブの開始時刻と現在時刻から実行時間を計算
          # macOS/Windowsでは date コマンドの互換性がないため、Linux (ubuntu-latest) 前提
          START_TIME=$(date -d "${{ job.started_at }}" +%s)
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          # 実行時間を 分:秒 形式にフォーマット
          MINUTES=$((DURATION / 60))
          SECONDS=$((DURATION % 60))
          
          echo "| `${{ job.started_at }}` | `$(date -u -Iseconds)` | **${MINUTES}分 ${SECONDS}秒** |" >> $GITHUB_STEP_SUMMARY

      # ★★★ 追加ここまで ★★★